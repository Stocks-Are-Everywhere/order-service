name: CICD

on:
  push:
    branches: [ main, develop, user/hugh/feat/#41 ]
  pull_request:
    branches: [ main, develop, user/hugh/feat/#41 ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'  # Java 의존성 캐싱

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          gradle-version: wrapper
          cache-read-only: false
          cache-overwrite-existing: true

      - name: Build and Test
        run: ./gradlew build test --parallel

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          files: |
            **/build/test-results/**/*.xml

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 7

      # JAR 파일 빌드
      - name: Build JAR
        run: ./gradlew bootJar

  # 도커 이미지 빌드 및 푸시 작업
  docker:
    needs: build
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/user/hugh/feat/#41')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 도커 빌드를 위한 세팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 서비스별 도커 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/onseju-app:order
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/onseju-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/onseju-app:buildcache,mode=max

  # EC2 배포 작업
  deploy:
    needs: docker
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.ref == 'refs/heads/user/hugh/feat/#41' && github.event_name == 'push')
    runs-on: ubuntu-latest

    steps:
      # AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # EC2 인스턴스에 배포
      - name: Deploy to EC2
        env:
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # AWS SSM을 통해 배포 명령 실행
          aws ssm send-command \
            --instance-ids $EC2_INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "echo \"${{ secrets.DOCKERHUB_TOKEN }}\" | docker login -u \"${{ secrets.DOCKERHUB_USERNAME }}\" --password-stdin",
                "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/onseju-app:order",
                "docker stop order-service || true",
                "docker rm order-service || true",
                "docker run -d --name order-service --restart always -p 8081:8080 ${{ secrets.DOCKERHUB_USERNAME }}/onseju-app:order",
                "docker image prune -af --filter \"until=24h\""
              ]
            }' \
            --timeout-seconds 600

      # 배포 완료 알림
      - name: Deployment notification
        if: success()
        run: echo "주문 서비스가 성공적으로 배포되었습니다."
